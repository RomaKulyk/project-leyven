https://www.browserstack.com/guide/no-such-element-exception-selenium

NoSuchElementException is thrown by the findElement()method in Selenium
WebDriver when the desired web element cannot be located using the specified
locator, such as ID, name, CSS selecor, or XPATH. This exception indicates that
at the time of execution, the web element you are trying to interact with is not
present on the webpage.

NoSuchElementException in Selenium occurs in the following cases:
1. Changes in DOM structure
2. Element not present
3. Element not yet loaded
4. Wrong Locator Strategy

Here are different ways to handle NoSuchElementException in Selenium:
1. Using WebDriverWait 
WebDriverWait allows you to wait for an element to satisfy a specific
condition defined through the ExpectedCondition class in Selenium. For example,
you can use WebDriverWait to wait for some seconds untill desired element is
present in the Dom.
2. Using Try-Catch block
Surround the code block which you feel may throw a NoSuchElementException with a
try-catch block. This helps to catch the exception if it occurs and let the code
continue to work without abruptly stopping execution.
3. Use findElements() instead of findElement()
findElement() method of WebDriver returnes the first web element matching the
locator whereas findElements() returnes a list of web elements matching the
locator.
If the web element is created using findElement() method and the web element is
not present in the DOM, Selenium will surelyl throw a NoSuchElementException.
To avoid this, you can use findElements() method which returnes a list of web
elements and by checking the size of the list, the visibility of the web element
can be determined.
4. Use more reliable selector
Locators such as ID and name should be preferably used while creating locators.
And if there is no unique ID or name, XPATH should be used.